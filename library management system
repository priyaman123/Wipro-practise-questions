Oct 30, 7:04 PM
Marks: 5
Question 1
Sort the Collection
students are provided with a challenge to sort the given arraylist in the lesser lines of code. Student with minimum lines will win , try to write a code for it in less lines and win

Input

An arraylist of integers

Output

Sorted list

Sample input

1
4
5
0

output

List before sort: [1, 4, 5, 0]
List after sort: [0, 1, 4, 5]

Your answer

import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> list = new ArrayList<>();
        while(sc.hasNextInt()) {
            list.add(sc.nextInt());
        }
        System.out.println("List before sort: " + list);
        Collections.sort(list);
        System.out.println("List after sort: " + list);
    }
}
Comment:

All 2 test cases passed successfully.

Question 2
generics
Design a generic class Test to make the main work for Number classes, do not alter main class

input :

1 

output

"the sum is = 50.0

Your answer

import java.util.Scanner;


public class Main
{
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int choice=sc.nextInt();

		switch(choice) {
		case 1:
			Test<Integer> t1 = new Test<Integer>();
			t1.add(30, 20);
			break;
		case 2: 
			Test<Double> t2 = new Test<Double>();
			t2.add(10.0, 20.0);
			break;
		case 3: 
			Test<Float> t3 = new Test<Float>();
			t3.add(20.0f, 20.0f);
			break;

		}

	}

}
class Test<T extends Number>{
	void add(T a, T b){
		double sum = a.doubleValue() + b.doubleValue();
		System.out.println("the sum is = " + sum);
	}
  // complete this class
  // implement add method accordingly
}
Comment:

All 2 test cases passed successfully.

Question 3
Library Management System


Description :

You are tasked with building an enhanced Library Management System in Java. The system manages different types of items in the library, such as books, DVDs, and magazines.  Each item has common attributes like title, author/creator, a unique identifier, and a status indicating whether it is checked out or available.




Boiler plate code implementation of base class : LibraryItem and its subclasses : Book ,DVD and Magazine, and a generic class Library representing the library are given. 


The enhanced system introduces the ability to check out and return items. Exceptions are used to handle scenarios where an item is already checked out or not checked out when attempting to return it.




The code starts with the main class EnhancedLibraryManagementSystemwhich contains the main method to execute the Library Management System. 




A description of each class is provided below, along with the task that you need to complete and finish.



Classes and Methods:

a) LibraryItem Class:
Attributes:



itemId (unique identifier)
title
creator (author for books, director for DVDs, etc.)
checkedOut (status indicating whether the item is checked out.)
Methods: () 

toString(): Generates a string representation of the item.

Your Tasks:

 Constructor Implementation: (Complete the code)
Implement the constructor for LibraryItem to initialize its attributes.
  Getter Methods: (Complete the code)
Define getter methods for itemId, title, and creator. which will return itemId, title and creator.
Methods:(To be implemented)

checkOut(): Marks the item as checked out.
returnItem(): Marks the item as returned.
b) Book Class (extends LibraryItem):
Additional Attributes:

numPages (number of pages) 
Constructor:

public Book(int itemId, String title, String author, int numPages);
Methods:

Inherited methods from LibraryItem. 

Your Task:

    Constructor Implementation: (Complete the code)

Implement the Constructor : define a parameterized constructor with 4 arguments: int itemId, String title, String author, int numPages.
Hint: Utilize the parent class's (LibraryItem) constructor.
Implement getter method
c) DVD Class (extends LibraryItem):
Additional Attributes:

duration (duration in minutes)
Constructor:

public DVD(int itemId, String title, String director, int duration);
Methods:

Inherited methods from LibraryItem.
Tasks:

Constructor Implementation: (Complete the code)
        Implement the constructor. : define a parameterized constructor with 4 arguments int itemId, String title, String director, int   
         duration.
     Hint: Utilize the parent class's (LibraryItem) constructor.
Implement getter method.
d) Magazine Class (extends LibraryItem):
Additional Attributes:

issueNumber (magazine issue number)
Constructor:

public Magazine(int itemId, String title, String publisher, int issueNumber);
Methods:

Inherited methods from LibraryItem.
Tasks:

Constructor Implementation: (Complete the code) 
   Implement the constructor. : define a parameterized constructor with 4 arguments: int itemId, String title, String publisher,   int issueNumber.
 Hint: Utilize the parent class's (LibraryItem) constructor.
Implement getter method.
e) Library Class:
Attributes:

items (a list of library items)
Methods:

addItem(T item): Adds an item to the library. (Pre-Implemented)
displayItems(): Displays details of all items in the library. (Pre-Implemented)
checkOutItem(int itemId): Checks out an item by marking it as checked out.
returnItem(int itemId): Returns a checked-out item by marking it as returned.
private T findItem(int itemId): Finds an item in the library by its itemId.
Tasks:

Implement the methods: (Complete the code)
public boolean checkOutItem(int itemId): Find the item if exist then , Checks out an item and returns true if successful, false otherwise.
public boolean returnItem(int itemId): Find the item if exist then, Returns a checked-out item and returns true if successful, false otherwise.
private T findItem(int itemId): Finds and returns an item by its itemId. Returns null if not found.


Tasks:


Custom Exceptions:( Implement)


ItemAlreadyCheckedOutException Class (extends RuntimeException):

Custom exception for handling cases where an item is already checked out. (It should display in the below given format)
             format:  Item 101 is already checked out   

Note* ( 101 is itemId)

ItemNotCheckedOutException Class (extends RuntimeException):

Custom exception for handling cases where an item is not checked out when attempting to return it.(It should display in the below given format)
            format:  Item 101 is not checked out 

Note* ( 101 is itemId)



Your answer

import java.util.*;

// Main class
public class EnhancedLibraryManagementSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int ch = scanner.nextInt();

        if (ch == 1) { // Display Books
            Library<Book> bookLibrary = new Library<>();
            int n = scanner.nextInt();
            for (int i = 1; i <= n; i++) {
                int id = scanner.nextInt();
                scanner.nextLine();
                String name = scanner.nextLine();
                String author = scanner.nextLine();
                int numpages = scanner.nextInt();
                Book book = new Book(id, name, author, numpages);
                bookLibrary.addItem(book);
            }
            bookLibrary.displayItems();
        } else if (ch == 2) { // Display DVDs and Magazines
            Library<DVD> dvdLibrary = new Library<>();
            int n = scanner.nextInt();
            for (int i = 1; i <= n; i++) {
                int id = scanner.nextInt();
                scanner.nextLine();
                String name = scanner.nextLine();
                String director = scanner.nextLine();
                int duration = scanner.nextInt();
                DVD dvd = new DVD(id, name, director, duration);
                dvdLibrary.addItem(dvd);
            }

            Library<Magazine> magazineLibrary = new Library<>();
            n = scanner.nextInt();
            for (int i = 1; i <= n; i++) {
                int id = scanner.nextInt();
                scanner.nextLine();
                String name = scanner.nextLine();
                String publisher = scanner.nextLine();
                int issueNo = scanner.nextInt();
                Magazine magazine = new Magazine(id, name, publisher, issueNo);
                magazineLibrary.addItem(magazine);
            }
            dvdLibrary.displayItems();
            magazineLibrary.displayItems();
        } else if (ch == 3) { // Check out item
            Library<Book> bookLibrary = new Library<>();
            int n = scanner.nextInt();
            for (int i = 1; i <= n; i++) {
                int id = scanner.nextInt();
                scanner.nextLine();
                String name = scanner.nextLine();
                String author = scanner.nextLine();
                int numpages = scanner.nextInt();
                Book book = new Book(id, name, author, numpages);
                bookLibrary.addItem(book);
            }

            int itemId = scanner.nextInt();

            try {
                if (bookLibrary.checkOutItem(itemId)) {
                    System.out.println("Item " + itemId + " checked out successfully.");
                } else {
                    System.out.println("Item " + itemId + " not found in the library.");
                }
            } catch (ItemAlreadyCheckedOutException e) {
                System.out.println(e.getMessage());
            }
        } else if (ch == 4) { // Return item
            Library<Magazine> magazineLibrary = new Library<>();
            int n = scanner.nextInt();
            for (int i = 1; i <= n; i++) {
                int id = scanner.nextInt();
                scanner.nextLine();
                String name = scanner.nextLine();
                String publisher = scanner.nextLine();
                int issueNo = scanner.nextInt();
                Magazine magazine = new Magazine(id, name, publisher, issueNo);
                magazine.checkedOut = true;
                magazineLibrary.addItem(magazine);
            }

            int itemId = scanner.nextInt();

            try {
                if (magazineLibrary.returnItem(itemId)) {
                    System.out.println("Item " + itemId + " returned successfully.");
                } else {
                    System.out.println("Item " + itemId + " not found in the library.");
                }
            } catch (ItemNotCheckedOutException e) {
                System.out.println(e.getMessage());
            }
        }
    }
}

// Base class
class LibraryItem {
    private int itemId;
    private String title;
    private String creator;
    public boolean checkedOut;

    public LibraryItem(int itemId, String title, String creator) {
        this.itemId = itemId;
        this.title = title;
        this.creator = creator;
        this.checkedOut = false;
    }

    public int getItemId() {
        return itemId;
    }

    public String getTitle() {
        return title;
    }

    public String getCreator() {
        return creator;
    }

    public boolean isCheckedOut() {
        return checkedOut;
    }

    public void checkOut() {
        if (checkedOut)
            throw new ItemAlreadyCheckedOutException(itemId);
        checkedOut = true;
    }

    public void returnItem() {
        if (!checkedOut)
            throw new ItemNotCheckedOutException(itemId);
        checkedOut = false;
    }

    @Override
    public String toString() {
        return "Item ID: " + itemId + "\nTitle: " + title + "\nCreator: " + creator + "\nChecked Out: " + checkedOut;
    }
}

// Custom Exceptions
class ItemAlreadyCheckedOutException extends RuntimeException {
    public ItemAlreadyCheckedOutException(int itemId) {
        super("Item " + itemId + " is already checked out");
    }
}

class ItemNotCheckedOutException extends RuntimeException {
    public ItemNotCheckedOutException(int itemId) {
        super("Item " + itemId + " is not checked out");
    }
}

// Book class
class Book extends LibraryItem {
    private int numPages;

    public Book(int itemId, String title, String author, int numPages) {
        super(itemId, title, author);
        this.numPages = numPages;
    }

    @Override
    public String toString() {
        return super.toString() + "\nType: Book\nNumber of Pages: " + numPages;
    }
}

// DVD class
class DVD extends LibraryItem {
    private int duration;

    public DVD(int itemId, String title, String director, int duration) {
        super(itemId, title, director);
        this.duration = duration;
    }

    @Override
    public String toString() {
        return super.toString() + "\nType: DVD\nDuration: " + duration + " minutes";
    }
}

// Magazine class
class Magazine extends LibraryItem {
    private int issueNumber;

    public Magazine(int itemId, String title, String publisher, int issueNumber) {
        super(itemId, title, publisher);
        this.issueNumber = issueNumber;
    }

    @Override
    public String toString() {
        return super.toString() + "\nType: Magazine\nIssue Number: " + issueNumber;
    }
}

// Generic Library class
class Library<T extends LibraryItem> {
    private List<T> items = new ArrayList<>();

    public void addItem(T item) {
        items.add(item);
    }

    public void displayItems() {
        for (T item : items) {
            System.out.println(item);
            System.out.println("-------------");
        }
    }

    public boolean checkOutItem(int itemId) {
        T item = findItem(itemId);
        if (item != null) {
            item.checkOut();
            return true;
        }
        return false;
    }

    public boolean returnItem(int itemId) {
        T item = findItem(itemId);
        if (item != null) {
            item.returnItem();
            return true;
        }
        return false;
    }

    private T findItem(int itemId) {
        for (T item : items) {
            if (item.getItemId() == itemId) {
                return item;
            }
        }
        return null;
    }
}
